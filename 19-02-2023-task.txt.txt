Write a shell script to get current date, time, user name and current working directory 

ANS :
 #!/bin/bash

echo "Current date is `date`"
echo "User is `who i am`"
echo "Current direcotry `pwd`
 
OUTPUT:
sanjay@UBUNTU:~/Desktop/scripting$ ./date.sh
Current date is  sunday 19 February 2023 11:40:14 AM IST
User is sanjay
Current directory /home/sanjay

==============================================================================================================================================================================

. You needs to print a given Number say 10572, in reverse order using a Shell script such that the input is provided using command Line Argument only. 
If the input data is not provided as Command Line Argument, it should throw and error and should suggest, how to use the script.  
Write the script but before that tell me the algorithm that needs to be implemented here.

ANS :
#!/bin/bash
if [[ $# -eq 0 ]]
then
echo " number not provided "
echo "please enter the number as a command line argument :"

else

num=$1
sd=0
rev=0
while [ $num -gt 0 ]
do
    sd=$(( $num % 10 ))
    rev=$(( $rev *\ 10 + $sd ))
    n=$(( $num / 10 ))
fi

echo "Reverse number of entered digit is $rev"


OUTPUT : sanjay@UBUNTU:~/Desktop/scripting$ ./reverse.sh 1619
Reverse number of entered digit is 9161

=================================================================================================================================================================================

Write a Shell Script that adds two numbers if provided as the command Line Argument and if the two numbers are not entered it outputs 
an Error Message along with a one-Line of how-to use description.

ANS :
#!bin/bash

if [[ $# -le 1 ]]
then
	 echo " please enter the values as commad line arguments ! "

else 
 
	num1=$1
	num2=$2
	sum=`expr num1 + num2`
	echo " the sum of provided numbers is $sum"
fi

OUTPUT :
sanjay@UBUNTU:~/Desktop/scripting$ ./sum.sh
case1
./add.sh 23 24

the sum of provided numbers is 45
 
case2

./add.sh

 please enter the values as commad line arguments !
===========================================================================================================================================================================

You are supposed to find the value of pi upto 100 places of decimal, what is the easiest way to get the result done.
 ANS :

#!/bin/bash
 sudo apt-get update
sudo apt-get pi
pi 100

OUTPUT:
sanjay@UBUNTU:~/Desktop/scripting$ ./pi.sh
3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067

============================================================================================================================================================================
You are supposed to calculate a real number calculation directly from terminal and not any shell script. What will you do (say the real numbers are 7.56 and 2.453)?

we can use the bash calculator for the culculation of decimal values 
systex:
echo num1 +/-%* num2 | bc

==================================================================================================================================================================================
20-2-2023 monday :

Task covering all topics of shell scripting:- 

 

Define the backup directory: set a variable called BACKUP_DIR to the directory where the backups will be stored, such as /var/backups. 

Define the file system paths to be backed up: set a variable called BACKUP_PATHS to a space-separated list of the directories you want to back up, such as /etc /home /opt /var. 

Define the backup filename: set a variable called BACKUP_FILENAME to the name of the backup file, including the current date and time. You can use the date command to generate the timestamp and append it to a string, such as $(date +%Y-%m-%d_%H-%M-%S)_backup.tar.gz. 

Define the number of backups to keep: set a variable called BACKUP_COUNT to the maximum number of backups you want to keep, such as 5. 

Define a function to create the backup archive: create a function called create_backup that runs the tar command to create a compressed tar archive of the specified directories and saves it to the backup directory with the specified filename. 

Define a function to check if the backup directory exists: create a function called check_backup_dir that checks if the backup directory exists and creates it if it does not. 

Define a function to check if the backup was successful: create a function called check_backup_status that checks the exit status of the tar command to see if the backup      was created successfully or not. If the exit status is 0, output a message saying the backup was created successfully. If the exit status is not 0, output a message saying the backup failed and exit the script with a status code of 1. 

Define a function to remove old backups: create a function called remove_old_backups that gets a list of all the backup files in the backup directory, sorts them by modification time (oldest first), and removes the oldest ones until the number of backups is below the maximum specified in BACKUP_COUNT. 

Check if backup directory exists call the check_backup_dir function to ensure that the backup directory exists. 

Create backup archive: call the create_backup function to create the backup archive. 

Check backup status: call the check_backup_status function to check the exit status of the tar command and output a message indicating whether the backup was successful or not. 

Remove old backups: call the remove_old_backups function to remove any old backup archives if the maximum number of backups has been exceeded. 

Exit script: exit the script with a status code of 0 to indicate successful completion

ANS :

#!/bin/bash

BACKUP_DIR="/var/backups"
BACKUP_PATHS="/etc /home /opt /var"
BACKUP_FILENAME="$(date +%Y-%m-%d_%H-%M-%S)_backup.tar.gz"
BACKUP_COUNT="5"

# Define functionscreate_backup()
 {  
  tar -czf "$BACKUP_DIR/$BACKUP_FILENAME" $BACKUP_PATHS
}

check_backup_dir()
 {
    if [ ! -d "$BACKUP_DIR" ];
 then     
   mkdir -p "$BACKUP_DIR"  
  fi
}

 check_backup_status()
 { 
  if [ $? -eq 0 ];
 then  
      echo "Backup created successfully."    
  else  
      echo "Backup failed."  
      exit 1  
  fi
}

remove_old_backups()
 {
    cd "$BACKUP_DIR"  
  backup_files=($(ls -t))  
  num_backups=${#backup_files[@]}
if [ $num_backups -gt $BACKUP_COUNT ]; 
then 
    num_to_delete=$((num_backups - BACKUP_COUNT))  
      for (( i=0; i<num_to_delete; i++ ));
 do      
      rm "${backup_files[$i]}"  
      done   
 fi
}
check_backup_dir
create_backup
check_backup_status
remove_old_backups


OUT PUT :

root@sanjay:/home/sharon/Desktop/practice# bash tar.sh
tar: Removing leading `/' from member names
Backup created successfully
root@sanjay:/home/sharon/Desktop/practice# cd /var/backups
root@sanjay:/var/backups# ls
2023-02-21_17-47-10_backup.tar.gz
=============================================================================================================================================================================================







 

